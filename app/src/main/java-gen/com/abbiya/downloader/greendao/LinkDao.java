package com.abbiya.downloader.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table LINK.
 */
public class LinkDao extends AbstractDao<Link, Long> {

    public static final String TABLENAME = "LINK";

    public LinkDao(DaoConfig config) {
        super(config);
    }

    ;


    public LinkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'LINK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'LOCATION' TEXT," + // 2: location
                "'DESCRIPTION' TEXT," + // 3: description
                "'STATUS' TEXT," + // 4: status
                "'PROGRESS' INTEGER," + // 5: progress
                "'DOWNLOAD_ID' INTEGER);"); // 6: downloadId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LINK'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Link entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }

        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(5, status);
        }

        Integer progress = entity.getProgress();
        if (progress != null) {
            stmt.bindLong(6, progress);
        }

        Long downloadId = entity.getDownloadId();
        if (downloadId != null) {
            stmt.bindLong(7, downloadId);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Link readEntity(Cursor cursor, int offset) {
        Link entity = new Link( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // location
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // status
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // progress
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // downloadId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Link entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProgress(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDownloadId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Link entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Link entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Link.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Location = new Property(2, String.class, "location", false, "LOCATION");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property Progress = new Property(5, Integer.class, "progress", false, "PROGRESS");
        public final static Property DownloadId = new Property(6, Long.class, "downloadId", false, "DOWNLOAD_ID");
    }

}
